var searchIndex = JSON.parse('{\
"mt_logic":{"doc":"","t":"","n":[],"q":[],"d":[],"i":[],"f":[],"c":[],"p":[]},\
"mt_logic_io":{"doc":"","t":"NNNNNNNNNDDEEEDDNNRRRNNNNNGENLMMLLLLLLLLLLLLLLLLLLLLLLLLLLFFLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMLLLLLLLLMLLMMLLLLLLLLLLLLMMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMMMM","n":["Approval","Balance","Clear","Err","Failure","Finished","GetApproval","GetBalance","InProgress","InitMTLogic","Instruction","InstructionState","MTLogicAction","MTLogicEvent","MTLogicMetadata","MTLogicState","Message","MigrateStorages","NFT_BIT","NFT_INDEX_MASK","NFT_TYPE_MASK","Ok","RunWithError","ScheduledAbort","ScheduledRun","Success","TokenId","TransactionStatus","UpdateStorageCodeHash","abort","admin","admin","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","create_decrease_instruction","create_increase_instruction","decode","decode","decode","decode","decode","decode","decode","decode_all","decode_all","decode_all","decode_all","decode_all","decode_all","decode_all","decode_all_with_depth_limit","decode_all_with_depth_limit","decode_all_with_depth_limit","decode_all_with_depth_limit","decode_all_with_depth_limit","decode_all_with_depth_limit","decode_all_with_depth_limit","decode_with_depth_limit","decode_with_depth_limit","decode_with_depth_limit","decode_with_depth_limit","decode_with_depth_limit","decode_with_depth_limit","decode_with_depth_limit","encode_to","encode_to","encode_to","encode_to","encode_to","encode_to","encode_to","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","id_to_storage","instructions","into","into","into","into","into","into","into","into","mtoken_id","new","start","storage_code_hash","storage_code_hash","to_keyed_vec","to_keyed_vec","to_keyed_vec","to_keyed_vec","to_keyed_vec","to_keyed_vec","to_keyed_vec","to_owned","to_owned","to_owned","to_owned","to_owned","token_creators","token_nonce","token_total_supply","token_uris","transaction_status","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_info","type_info","type_info","type_info","type_info","type_info","type_info","account","account","account","approval_target","payload","token_id","transaction_hash"],"q":[[0,"mt_logic_io"],[171,"mt_logic_io::MTLogicAction"]],"d":["Should be returned from <code>MTLogicAction::GetApproval</code>.","Should be returned from <code>MTLogicAction::GetBalance</code>.","Deletes the stored transaction entity with its status by …","Should be returned from <code>MTLogicAction::Message</code>, if the …","Transaction is failed.","","Returns status approval for <code>approval_target</code> from <code>account</code>.","Returns <code>account</code> token balance.","Transaction is in progress.","Initializes the contract.","","","Sends the contract info about what it should do.","A result of processed <code>MTLogicAction</code>.","","The contract state.","Handles high-level token operations.","Unimplemented.","Upper bit of <code>TokenId</code> is a flag, that indicates if this is …","Lower bits specifies NFT index.","Determines nft subtype by upper 64 bits(half of <code>TokenId</code>).","Should be returned from <code>MTLogicAction::Message</code>, if the …","","","","Transaction completed successfully.","","Internal transaction entities possible status.","Updates unique hash-identifier of storage contract code.","","Multitoken logic admin address.","Has ability to update storage code hash.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Mapping with specific id to multitoken storage impl: <code>String</code>…","Stores instructions which may contain a few multitoken …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Multitoken main contract address.","Create a new instruction from a given transaction and a …","","Unique hash-identifier of storage contract code.","Unique hash-identifier of storage contract code.","","","","","","","","","","","","","Mapping with token creators: <code>token_id</code> -&gt; <code>ActorId</code>.","Global token nonce(counter).","Mapping with tokens total supply: <code>token_id</code> -&gt; <code>u128</code>.","Mapping with token URIs: <code>token_id</code> -&gt; <code>String</code>(URI).","Stores abstract transactions statuses.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The actual account that made the operation (initiator).","Specifies the account whose balance you want to find out.","An account that provides approve.","An account that is being verified.","Encoded high-level [<code>Action</code>] operation.","Token ID to get the balance.","Unique operation transaction hash."],"i":[12,12,6,12,4,3,6,6,4,0,0,0,0,0,0,0,6,6,0,0,0,12,3,3,3,4,0,0,6,1,5,13,26,3,1,4,5,6,12,13,26,3,1,4,5,6,12,13,3,1,4,5,6,3,1,4,5,6,0,0,3,1,4,5,6,12,13,3,1,4,5,6,12,13,3,1,4,5,6,12,13,3,1,4,5,6,12,13,3,1,4,5,6,12,13,3,1,4,5,6,26,3,1,4,5,6,12,13,5,5,26,3,1,4,5,6,12,13,5,1,1,5,13,3,1,4,5,6,12,13,3,1,4,5,6,5,5,5,5,5,26,3,1,4,5,6,12,13,26,3,1,4,5,6,12,13,26,3,1,4,5,6,12,13,3,1,4,5,6,12,13,27,28,29,29,27,28,27],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[1,2],0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[3,3],[1,1],[4,4],[5,5],[6,6],[[]],[[]],[[]],[[]],[[]],[[7,8,9,8,8,9],1],[[7,8,9,8,9],1],[10,[[2,[3,11]]]],[10,[[2,[1,11]]]],[10,[[2,[4,11]]]],[10,[[2,[5,11]]]],[10,[[2,[6,11]]]],[10,[[2,[12,11]]]],[10,[[2,[13,11]]]],[[],[[2,[11]]]],[[],[[2,[11]]]],[[],[[2,[11]]]],[[],[[2,[11]]]],[[],[[2,[11]]]],[[],[[2,[11]]]],[[],[[2,[11]]]],[14,[[2,[11]]]],[14,[[2,[11]]]],[14,[[2,[11]]]],[14,[[2,[11]]]],[14,[[2,[11]]]],[14,[[2,[11]]]],[14,[[2,[11]]]],[[14,10],[[2,[11]]]],[[14,10],[[2,[11]]]],[[14,10],[[2,[11]]]],[[14,10],[[2,[11]]]],[[14,10],[[2,[11]]]],[[14,10],[[2,[11]]]],[[14,10],[[2,[11]]]],[[3,[0,[15,16]]]],[[1,[0,[15,16]]]],[[4,[0,[15,16]]]],[[5,[0,[15,16]]]],[[6,[0,[15,16]]]],[[12,[0,[15,16]]]],[[13,[0,[15,16]]]],[[3,17],18],[[1,17],18],[[4,17],18],[[5,17],18],[[6,17],18],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[[8,19,[20,[19]]],1],[1,2],0,0,[[],[[23,[21,22]]]],[[],[[23,[21,22]]]],[[],[[23,[21,22]]]],[[],[[23,[21,22]]]],[[],[[23,[21,22]]]],[[],[[23,[21,22]]]],[[],[[23,[21,22]]]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],25],[[],25],[[],25],[[],25],[[],25],[[],25],[[],25],0,0,0,0,0,0,0],"c":[],"p":[[3,"Instruction"],[4,"Result"],[4,"InstructionState"],[4,"TransactionStatus"],[3,"MTLogicState"],[4,"MTLogicAction"],[3,"H256"],[3,"ActorId"],[15,"u128"],[8,"Input"],[3,"Error"],[4,"MTLogicEvent"],[3,"InitMTLogic"],[15,"u32"],[8,"Output"],[8,"Sized"],[3,"Formatter"],[6,"Result"],[4,"MTStorageAction"],[4,"Option"],[15,"u8"],[3,"Global"],[3,"Vec"],[3,"TypeId"],[3,"Type"],[3,"MTLogicMetadata"],[13,"Message"],[13,"GetBalance"],[13,"GetApproval"]]},\
"mt_main":{"doc":"","t":"F","n":["get_hash"],"q":[[0,"mt_main"]],"d":[""],"i":[0],"f":[[[1,2],3]],"c":[],"p":[[3,"ActorId"],[15,"u64"],[3,"H256"]]},\
"mt_main_io":{"doc":"","t":"NNNNNNNNNNNNDEDEEDNNNNNNGENNMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMLMLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMMMMMMMMMMMMMMMMMMMMMMMM","n":["Approval","Approve","Balance","BurnBatchFT","BurnNFT","Clear","Create","Err","Failure","GetApproval","GetBalance","InProgress","InitMToken","LogicAction","MTMainMetadata","MTokenAction","MTokenEvent","MTokenState","Message","MigrateStorageAddresses","MintBatchFT","MintBatchNFT","Ok","Success","TokenId","TransactionStatus","Transfer","UpdateLogicContract","admin","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","cmp","decode","decode","decode","decode","decode","decode","decode_all","decode_all","decode_all","decode_all","decode_all","decode_all","decode_all_with_depth_limit","decode_all_with_depth_limit","decode_all_with_depth_limit","decode_all_with_depth_limit","decode_all_with_depth_limit","decode_all_with_depth_limit","decode_with_depth_limit","decode_with_depth_limit","decode_with_depth_limit","decode_with_depth_limit","decode_with_depth_limit","decode_with_depth_limit","encode_to","encode_to","encode_to","encode_to","encode_to","encode_to","eq","equivalent","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","into","into","into","into","into","into","into","mt_logic_code_hash","mt_logic_id","partial_cmp","storage_code_hash","to_keyed_vec","to_keyed_vec","to_keyed_vec","to_keyed_vec","to_keyed_vec","to_keyed_vec","to_owned","to_owned","to_owned","to_owned","transactions","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_info","type_info","type_info","type_info","type_info","type_info","account","amount","amounts","amounts","burn_from","from","initial_amount","is_approved","is_nft","recipient","sender","to","to","token_id","token_id","token_id","token_id","token_id","uri","account","account","approval_target","mt_logic_code_hash","payload","storage_code_hash","token_id","transaction_id"],"q":[[0,"mt_main_io"],[144,"mt_main_io::LogicAction"],[163,"mt_main_io::MTokenAction"]],"d":["Should be returned from <code>MTokenAction::GetApproval</code>.","Gives <code>approve</code> to <code>account</code> for various token-related …","Should be returned from <code>MTokenAction::GetBalance</code>.","Burns new fungible <code>token_id</code> tokens from <code>burn_from</code> for …","Burns new non-fungible <code>token_id</code> token from <code>from</code>.","Deletes the stored transaction entity with its status by …","Creates new token.","Should be returned from <code>MTokenAction::Message</code>, if the …","Transaction is failed.","Returns status approval for <code>approval_target</code> from <code>account</code>.","Returns <code>account</code> token balance.","Transaction is in progress.","Initializes the contract.","High-level token-related operations.","","Sends the contract info about what it should do.","A result of processed <code>MTokenAction</code>.","The contract state.","Handles high-level token operations.","Unimplemented.","Mints new fungible <code>token_id</code> tokens for <code>to</code> with <code>amounts</code>.","Mints new non-fungible <code>token_id</code> tokens for <code>to</code>.","Should be returned from <code>MTokenAction::Message</code>, if the …","Transaction completed successfully.","","Internal transaction entities possible status.","Transfer <code>amount</code> of <code>token_id</code> tokens from <code>sender</code> to <code>recipient</code>…","Updates unique hash-identifier or multitoken storage and …","Multitoken main contract admin.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Unique hash-identifier of logic contract code.","Address of multitoken logic contract.","","Unique hash-identifier of storage contract code.","","","","","","","","","","","Stores abstract transactions statuses.","","","","","","","","","","","","","","","","","","","","","","","","","","","","Account to which access is granted.","Tokens amount for transfer.","Vector with amounts.","Vector with burn amounts.","Vector with targets.","Burn target(account).","Initial token amount which will be minted to <code>msg::source()</code>…","Approve flag.","Indicates if this token is nft.","Transfer recipient.","Account from which tokens will be transferred.","Vector with recipients.","Vector with recipients.","Identifier of the token with which transfer will be …","Identifier of the token with which mint will be performed.","Identifier of the token with which mint will be performed.","Identifier of the token with which burn will be performed.","Identifier of the token with which burn will be performed.","Base URI with token metadata.","Specifies the account whose balance you want to find out.","An account that provides approve.","An account that is being verified.","Unique hash-identifier of logic contract code.","Encoded high-level <code>LogicAction</code> operation.","Unique hash-identifier of storage contract code.","Token ID to get the balance.","Operation transaction id(each new abstract-transaction …"],"i":[3,4,3,4,4,9,4,3,2,9,9,2,0,0,0,0,0,0,9,9,4,4,3,2,0,0,4,9,1,23,1,2,9,3,4,10,23,1,2,9,3,4,10,1,2,3,4,1,2,3,4,3,1,2,9,3,4,10,1,2,9,3,4,10,1,2,9,3,4,10,1,2,9,3,4,10,1,2,9,3,4,10,3,3,1,2,9,4,23,1,2,9,3,4,10,23,1,2,9,3,4,10,10,1,3,10,1,2,9,3,4,10,1,2,3,4,1,23,1,2,9,3,4,10,23,1,2,9,3,4,10,23,1,2,9,3,4,10,1,2,9,3,4,10,24,25,26,27,27,28,29,24,29,25,25,26,30,25,26,30,27,28,29,31,32,32,33,34,33,31,34],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[1,1],[2,2],[3,3],[4,4],[[]],[[]],[[]],[[]],[[3,3],5],[6,[[8,[1,7]]]],[6,[[8,[2,7]]]],[6,[[8,[9,7]]]],[6,[[8,[3,7]]]],[6,[[8,[4,7]]]],[6,[[8,[10,7]]]],[[],[[8,[7]]]],[[],[[8,[7]]]],[[],[[8,[7]]]],[[],[[8,[7]]]],[[],[[8,[7]]]],[[],[[8,[7]]]],[11,[[8,[7]]]],[11,[[8,[7]]]],[11,[[8,[7]]]],[11,[[8,[7]]]],[11,[[8,[7]]]],[11,[[8,[7]]]],[[11,6],[[8,[7]]]],[[11,6],[[8,[7]]]],[[11,6],[[8,[7]]]],[[11,6],[[8,[7]]]],[[11,6],[[8,[7]]]],[[11,6],[[8,[7]]]],[[1,[0,[12,13]]]],[[2,[0,[12,13]]]],[[9,[0,[12,13]]]],[[3,[0,[12,13]]]],[[4,[0,[12,13]]]],[[10,[0,[12,13]]]],[[3,3],14],[[],14],[[1,15],16],[[2,15],16],[[9,15],16],[[4,15],16],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,[[3,3],[[17,[5]]]],0,[[],[[20,[18,19]]]],[[],[[20,[18,19]]]],[[],[[20,[18,19]]]],[[],[[20,[18,19]]]],[[],[[20,[18,19]]]],[[],[[20,[18,19]]]],[[]],[[]],[[]],[[]],0,[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],21],[[],21],[[],21],[[],21],[[],21],[[],21],[[],21],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],"c":[],"p":[[3,"MTokenState"],[4,"TransactionStatus"],[4,"MTokenEvent"],[4,"LogicAction"],[4,"Ordering"],[8,"Input"],[3,"Error"],[4,"Result"],[4,"MTokenAction"],[3,"InitMToken"],[15,"u32"],[8,"Output"],[8,"Sized"],[15,"bool"],[3,"Formatter"],[6,"Result"],[4,"Option"],[15,"u8"],[3,"Global"],[3,"Vec"],[3,"TypeId"],[3,"Type"],[3,"MTMainMetadata"],[13,"Approve"],[13,"Transfer"],[13,"MintBatchFT"],[13,"BurnBatchFT"],[13,"BurnNFT"],[13,"Create"],[13,"MintBatchNFT"],[13,"GetBalance"],[13,"GetApproval"],[13,"UpdateLogicContract"],[13,"Message"]]},\
"mt_storage":{"doc":"","t":"","n":[],"q":[],"d":[],"i":[],"f":[],"c":[],"p":[]},\
"mt_storage_io":{"doc":"","t":"NNNNNNNNNEEDDNGNMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLMLLLLLLLLLLLLLLLMMMMMMMMMMMMMMMMMMMMMMM","n":["Approval","Approve","Balance","ClearTransaction","DecreaseBalance","Err","GetApproval","GetBalance","IncreaseBalance","MTStorageAction","MTStorageEvent","MTStorageMetadata","MTStorageState","Ok","TokenId","Transfer","approvals","balances","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","decode","decode","decode","decode_all","decode_all","decode_all","decode_all_with_depth_limit","decode_all_with_depth_limit","decode_all_with_depth_limit","decode_with_depth_limit","decode_with_depth_limit","decode_with_depth_limit","encode_to","encode_to","encode_to","fmt","fmt","fmt","from","from","from","from","into","into","into","into","mt_logic_id","to_keyed_vec","to_keyed_vec","to_keyed_vec","to_owned","to_owned","to_owned","transaction_status","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_info","type_info","type_info","account","account","account","account","account","amount","amount","amount","approval_target","approve","msg_source","msg_source","msg_source","recipient","sender","token_id","token_id","token_id","token_id","transaction_hash","transaction_hash","transaction_hash","transaction_hash"],"q":[[0,"mt_storage_io"],[81,"mt_storage_io::MTStorageAction"]],"d":["Should be returned from <code>MTStorageAction::GetApproval</code>.","Gives <code>approve</code> to <code>account</code> for various token-related …","Should be returned from <code>MTStorageAction::GetBalance</code>.","Deletes the stored transaction entity with its status by …","Decrease <code>account</code> balance of <code>token_id</code> tokens.","Should be returned from any mutable operation from …","Returns status approval for <code>approval_target</code> from <code>account</code>.","Returns <code>account</code> token balance.","Increase <code>account</code> balance of <code>token_id</code> tokens.","Sends the contract info about what it should do.","A result of processed <code>MTStorageAction</code>.","","The contract state.","Should be returned from any mutable operation from …","","Transfer <code>amount</code> of <code>token_id</code> tokens from <code>sender</code> to <code>recipient</code>…","Mapping with approvals: <code>ActorId</code> -&gt; <code>ActorId</code> -&gt; <code>bool</code>.","Mapping with balances: <code>TokenId</code> -&gt; <code>ActorId</code> -&gt; <code>u128</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Address of multitoken logic contract.","","","","","","","Stores abstract transactions statuses.","","","","","","","","","","","","","","","","Specifies the account whose balance you want to find out.","An account that provides approve.","Account to which access is granted.","An account that needs to increase its balance.","An account that needs to decrease its balance.","Tokens amount for transfer.","Number of tokens by which the balance will be increased.","Number of tokens by which the balance will be decreased.","An account that is being verified.","Approve flag.","The actual account that made the transfer (initiator).","The actual account that made the approve (initiator).","The actual account that made the decrease operation …","Transfer recipient.","Account from which tokens will be transferred.","Token ID to get the balance.","Identifier of the token with which transfer will be …","Identifier of the token with which increase balance will …","Identifier of the token with which decrease balance will …","Unique transfer transaction hash.","Unique approve transaction hash.","Unique operation transaction hash.","Unique operation transaction hash."],"i":[3,2,3,2,2,3,2,2,2,0,0,0,0,3,0,2,1,1,17,1,2,3,17,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,17,1,2,3,17,1,2,3,1,1,2,3,1,2,3,1,17,1,2,3,17,1,2,3,17,1,2,3,1,2,3,18,19,20,21,22,23,21,22,19,20,23,20,22,23,23,18,23,21,22,23,20,21,22],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[1,1],[2,2],[3,3],[[]],[[]],[[]],[4,[[6,[1,5]]]],[4,[[6,[2,5]]]],[4,[[6,[3,5]]]],[[],[[6,[5]]]],[[],[[6,[5]]]],[[],[[6,[5]]]],[7,[[6,[5]]]],[7,[[6,[5]]]],[7,[[6,[5]]]],[[7,4],[[6,[5]]]],[[7,4],[[6,[5]]]],[[7,4],[[6,[5]]]],[[1,[0,[8,9]]]],[[2,[0,[8,9]]]],[[3,[0,[8,9]]]],[[1,10],11],[[2,10],11],[[3,10],11],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[[],[[14,[12,13]]]],[[],[[14,[12,13]]]],[[],[[14,[12,13]]]],[[]],[[]],[[]],0,[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],15],[[],15],[[],15],[[],15],[[],16],[[],16],[[],16],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],"c":[],"p":[[3,"MTStorageState"],[4,"MTStorageAction"],[4,"MTStorageEvent"],[8,"Input"],[3,"Error"],[4,"Result"],[15,"u32"],[8,"Output"],[8,"Sized"],[3,"Formatter"],[6,"Result"],[15,"u8"],[3,"Global"],[3,"Vec"],[3,"TypeId"],[3,"Type"],[3,"MTStorageMetadata"],[13,"GetBalance"],[13,"GetApproval"],[13,"Approve"],[13,"IncreaseBalance"],[13,"DecreaseBalance"],[13,"Transfer"]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
